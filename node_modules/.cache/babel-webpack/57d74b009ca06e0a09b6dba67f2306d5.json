{"ast":null,"code":"/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\n\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\n\n\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\n\n\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/*\r\nLanguage: Rust\r\nAuthor: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>\r\nContributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>\r\nWebsite: https://www.rust-lang.org\r\nCategory: common, system\r\n*/\n\n/** @type LanguageFn */\n\n\nfunction rust(hljs) {\n  const FUNCTION_INVOKE = {\n    className: \"title.function.invoke\",\n    relevance: 0,\n    begin: concat(/\\b/, /(?!let\\b)/, hljs.IDENT_RE, lookahead(/\\s*\\(/))\n  };\n  const NUMBER_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\\?';\n  const KEYWORDS = [\"abstract\", \"as\", \"async\", \"await\", \"become\", \"box\", \"break\", \"const\", \"continue\", \"crate\", \"do\", \"dyn\", \"else\", \"enum\", \"extern\", \"false\", \"final\", \"fn\", \"for\", \"if\", \"impl\", \"in\", \"let\", \"loop\", \"macro\", \"match\", \"mod\", \"move\", \"mut\", \"override\", \"priv\", \"pub\", \"ref\", \"return\", \"self\", \"Self\", \"static\", \"struct\", \"super\", \"trait\", \"true\", \"try\", \"type\", \"typeof\", \"unsafe\", \"unsized\", \"use\", \"virtual\", \"where\", \"while\", \"yield\"];\n  const LITERALS = [\"true\", \"false\", \"Some\", \"None\", \"Ok\", \"Err\"];\n  const BUILTINS = [// functions\n  'drop ', // traits\n  \"Copy\", \"Send\", \"Sized\", \"Sync\", \"Drop\", \"Fn\", \"FnMut\", \"FnOnce\", \"ToOwned\", \"Clone\", \"Debug\", \"PartialEq\", \"PartialOrd\", \"Eq\", \"Ord\", \"AsRef\", \"AsMut\", \"Into\", \"From\", \"Default\", \"Iterator\", \"Extend\", \"IntoIterator\", \"DoubleEndedIterator\", \"ExactSizeIterator\", \"SliceConcatExt\", \"ToString\", // macros\n  \"assert!\", \"assert_eq!\", \"bitflags!\", \"bytes!\", \"cfg!\", \"col!\", \"concat!\", \"concat_idents!\", \"debug_assert!\", \"debug_assert_eq!\", \"env!\", \"panic!\", \"file!\", \"format!\", \"format_args!\", \"include_bin!\", \"include_str!\", \"line!\", \"local_data_key!\", \"module_path!\", \"option_env!\", \"print!\", \"println!\", \"select!\", \"stringify!\", \"try!\", \"unimplemented!\", \"unreachable!\", \"vec!\", \"write!\", \"writeln!\", \"macro_rules!\", \"assert_ne!\", \"debug_assert_ne!\"];\n  const TYPES = [\"i8\", \"i16\", \"i32\", \"i64\", \"i128\", \"isize\", \"u8\", \"u16\", \"u32\", \"u64\", \"u128\", \"usize\", \"f32\", \"f64\", \"str\", \"char\", \"bool\", \"Box\", \"Option\", \"Result\", \"String\", \"Vec\"];\n  return {\n    name: 'Rust',\n    aliases: ['rs'],\n    keywords: {\n      $pattern: hljs.IDENT_RE + '!?',\n      type: TYPES,\n      keyword: KEYWORDS,\n      literal: LITERALS,\n      built_in: BUILTINS\n    },\n    illegal: '</',\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.COMMENT('/\\\\*', '\\\\*/', {\n      contains: ['self']\n    }), hljs.inherit(hljs.QUOTE_STRING_MODE, {\n      begin: /b?\"/,\n      illegal: null\n    }), {\n      className: 'string',\n      variants: [{\n        begin: /b?r(#*)\"(.|\\n)*?\"\\1(?!#)/\n      }, {\n        begin: /b?'\\\\?(x\\w{2}|u\\w{4}|U\\w{8}|.)'/\n      }]\n    }, {\n      className: 'symbol',\n      begin: /'[a-zA-Z_][a-zA-Z0-9_]*/\n    }, {\n      className: 'number',\n      variants: [{\n        begin: '\\\\b0b([01_]+)' + NUMBER_SUFFIX\n      }, {\n        begin: '\\\\b0o([0-7_]+)' + NUMBER_SUFFIX\n      }, {\n        begin: '\\\\b0x([A-Fa-f0-9_]+)' + NUMBER_SUFFIX\n      }, {\n        begin: '\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' + NUMBER_SUFFIX\n      }],\n      relevance: 0\n    }, {\n      begin: [/fn/, /\\s+/, hljs.UNDERSCORE_IDENT_RE],\n      className: {\n        1: \"keyword\",\n        3: \"title.function\"\n      }\n    }, {\n      className: 'meta',\n      begin: '#!?\\\\[',\n      end: '\\\\]',\n      contains: [{\n        className: 'string',\n        begin: /\"/,\n        end: /\"/\n      }]\n    }, {\n      begin: [/let/, /\\s+/, /(?:mut\\s+)?/, hljs.UNDERSCORE_IDENT_RE],\n      className: {\n        1: \"keyword\",\n        3: \"keyword\",\n        4: \"variable\"\n      }\n    }, // must come before impl/for rule later\n    {\n      begin: [/for/, /\\s+/, hljs.UNDERSCORE_IDENT_RE, /\\s+/, /in/],\n      className: {\n        1: \"keyword\",\n        3: \"variable\",\n        5: \"keyword\"\n      }\n    }, {\n      begin: [/type/, /\\s+/, hljs.UNDERSCORE_IDENT_RE],\n      className: {\n        1: \"keyword\",\n        3: \"title.class\"\n      }\n    }, {\n      begin: [/(?:trait|enum|struct|union|impl|for)/, /\\s+/, hljs.UNDERSCORE_IDENT_RE],\n      className: {\n        1: \"keyword\",\n        3: \"title.class\"\n      }\n    }, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: {\n        keyword: \"Self\",\n        built_in: BUILTINS\n      }\n    }, {\n      className: \"punctuation\",\n      begin: '->'\n    }, FUNCTION_INVOKE]\n  };\n}\n\nmodule.exports = rust;","map":{"version":3,"sources":["D:/workspace_angular/asi/node_modules/highlight.js/lib/languages/rust.js"],"names":["source","re","lookahead","concat","args","joined","map","x","join","rust","hljs","FUNCTION_INVOKE","className","relevance","begin","IDENT_RE","NUMBER_SUFFIX","KEYWORDS","LITERALS","BUILTINS","TYPES","name","aliases","keywords","$pattern","type","keyword","literal","built_in","illegal","contains","C_LINE_COMMENT_MODE","COMMENT","inherit","QUOTE_STRING_MODE","variants","UNDERSCORE_IDENT_RE","end","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction lookahead(re) {\r\n  return concat('(?=', re, ')');\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/*\r\nLanguage: Rust\r\nAuthor: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>\r\nContributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>\r\nWebsite: https://www.rust-lang.org\r\nCategory: common, system\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction rust(hljs) {\r\n  const FUNCTION_INVOKE = {\r\n    className: \"title.function.invoke\",\r\n    relevance: 0,\r\n    begin: concat(\r\n      /\\b/,\r\n      /(?!let\\b)/,\r\n      hljs.IDENT_RE,\r\n      lookahead(/\\s*\\(/))\r\n  };\r\n  const NUMBER_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\\?';\r\n  const KEYWORDS = [\r\n    \"abstract\",\r\n    \"as\",\r\n    \"async\",\r\n    \"await\",\r\n    \"become\",\r\n    \"box\",\r\n    \"break\",\r\n    \"const\",\r\n    \"continue\",\r\n    \"crate\",\r\n    \"do\",\r\n    \"dyn\",\r\n    \"else\",\r\n    \"enum\",\r\n    \"extern\",\r\n    \"false\",\r\n    \"final\",\r\n    \"fn\",\r\n    \"for\",\r\n    \"if\",\r\n    \"impl\",\r\n    \"in\",\r\n    \"let\",\r\n    \"loop\",\r\n    \"macro\",\r\n    \"match\",\r\n    \"mod\",\r\n    \"move\",\r\n    \"mut\",\r\n    \"override\",\r\n    \"priv\",\r\n    \"pub\",\r\n    \"ref\",\r\n    \"return\",\r\n    \"self\",\r\n    \"Self\",\r\n    \"static\",\r\n    \"struct\",\r\n    \"super\",\r\n    \"trait\",\r\n    \"true\",\r\n    \"try\",\r\n    \"type\",\r\n    \"typeof\",\r\n    \"unsafe\",\r\n    \"unsized\",\r\n    \"use\",\r\n    \"virtual\",\r\n    \"where\",\r\n    \"while\",\r\n    \"yield\"\r\n  ];\r\n  const LITERALS = [\r\n    \"true\",\r\n    \"false\",\r\n    \"Some\",\r\n    \"None\",\r\n    \"Ok\",\r\n    \"Err\"\r\n  ];\r\n  const BUILTINS = [\r\n    // functions\r\n    'drop ',\r\n    // traits\r\n    \"Copy\",\r\n    \"Send\",\r\n    \"Sized\",\r\n    \"Sync\",\r\n    \"Drop\",\r\n    \"Fn\",\r\n    \"FnMut\",\r\n    \"FnOnce\",\r\n    \"ToOwned\",\r\n    \"Clone\",\r\n    \"Debug\",\r\n    \"PartialEq\",\r\n    \"PartialOrd\",\r\n    \"Eq\",\r\n    \"Ord\",\r\n    \"AsRef\",\r\n    \"AsMut\",\r\n    \"Into\",\r\n    \"From\",\r\n    \"Default\",\r\n    \"Iterator\",\r\n    \"Extend\",\r\n    \"IntoIterator\",\r\n    \"DoubleEndedIterator\",\r\n    \"ExactSizeIterator\",\r\n    \"SliceConcatExt\",\r\n    \"ToString\",\r\n    // macros\r\n    \"assert!\",\r\n    \"assert_eq!\",\r\n    \"bitflags!\",\r\n    \"bytes!\",\r\n    \"cfg!\",\r\n    \"col!\",\r\n    \"concat!\",\r\n    \"concat_idents!\",\r\n    \"debug_assert!\",\r\n    \"debug_assert_eq!\",\r\n    \"env!\",\r\n    \"panic!\",\r\n    \"file!\",\r\n    \"format!\",\r\n    \"format_args!\",\r\n    \"include_bin!\",\r\n    \"include_str!\",\r\n    \"line!\",\r\n    \"local_data_key!\",\r\n    \"module_path!\",\r\n    \"option_env!\",\r\n    \"print!\",\r\n    \"println!\",\r\n    \"select!\",\r\n    \"stringify!\",\r\n    \"try!\",\r\n    \"unimplemented!\",\r\n    \"unreachable!\",\r\n    \"vec!\",\r\n    \"write!\",\r\n    \"writeln!\",\r\n    \"macro_rules!\",\r\n    \"assert_ne!\",\r\n    \"debug_assert_ne!\"\r\n  ];\r\n  const TYPES = [\r\n    \"i8\",\r\n    \"i16\",\r\n    \"i32\",\r\n    \"i64\",\r\n    \"i128\",\r\n    \"isize\",\r\n    \"u8\",\r\n    \"u16\",\r\n    \"u32\",\r\n    \"u64\",\r\n    \"u128\",\r\n    \"usize\",\r\n    \"f32\",\r\n    \"f64\",\r\n    \"str\",\r\n    \"char\",\r\n    \"bool\",\r\n    \"Box\",\r\n    \"Option\",\r\n    \"Result\",\r\n    \"String\",\r\n    \"Vec\"\r\n  ];\r\n  return {\r\n    name: 'Rust',\r\n    aliases: [ 'rs' ],\r\n    keywords: {\r\n      $pattern: hljs.IDENT_RE + '!?',\r\n      type: TYPES,\r\n      keyword: KEYWORDS,\r\n      literal: LITERALS,\r\n      built_in: BUILTINS\r\n    },\r\n    illegal: '</',\r\n    contains: [\r\n      hljs.C_LINE_COMMENT_MODE,\r\n      hljs.COMMENT('/\\\\*', '\\\\*/', {\r\n        contains: [ 'self' ]\r\n      }),\r\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {\r\n        begin: /b?\"/,\r\n        illegal: null\r\n      }),\r\n      {\r\n        className: 'string',\r\n        variants: [\r\n          {\r\n            begin: /b?r(#*)\"(.|\\n)*?\"\\1(?!#)/\r\n          },\r\n          {\r\n            begin: /b?'\\\\?(x\\w{2}|u\\w{4}|U\\w{8}|.)'/\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        className: 'symbol',\r\n        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/\r\n      },\r\n      {\r\n        className: 'number',\r\n        variants: [\r\n          {\r\n            begin: '\\\\b0b([01_]+)' + NUMBER_SUFFIX\r\n          },\r\n          {\r\n            begin: '\\\\b0o([0-7_]+)' + NUMBER_SUFFIX\r\n          },\r\n          {\r\n            begin: '\\\\b0x([A-Fa-f0-9_]+)' + NUMBER_SUFFIX\r\n          },\r\n          {\r\n            begin: '\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' +\r\n                   NUMBER_SUFFIX\r\n          }\r\n        ],\r\n        relevance: 0\r\n      },\r\n      {\r\n        begin: [\r\n          /fn/,\r\n          /\\s+/,\r\n          hljs.UNDERSCORE_IDENT_RE\r\n        ],\r\n        className: {\r\n          1: \"keyword\",\r\n          3: \"title.function\"\r\n        }\r\n      },\r\n      {\r\n        className: 'meta',\r\n        begin: '#!?\\\\[',\r\n        end: '\\\\]',\r\n        contains: [\r\n          {\r\n            className: 'string',\r\n            begin: /\"/,\r\n            end: /\"/\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        begin: [\r\n          /let/, /\\s+/,\r\n          /(?:mut\\s+)?/,\r\n          hljs.UNDERSCORE_IDENT_RE\r\n        ],\r\n        className: {\r\n          1: \"keyword\",\r\n          3: \"keyword\",\r\n          4: \"variable\"\r\n        }\r\n      },\r\n      // must come before impl/for rule later\r\n      {\r\n        begin: [\r\n          /for/,\r\n          /\\s+/,\r\n          hljs.UNDERSCORE_IDENT_RE,\r\n          /\\s+/,\r\n          /in/\r\n        ],\r\n        className: {\r\n          1: \"keyword\",\r\n          3: \"variable\",\r\n          5: \"keyword\"\r\n        }\r\n      },\r\n      {\r\n        begin: [\r\n          /type/,\r\n          /\\s+/,\r\n          hljs.UNDERSCORE_IDENT_RE\r\n        ],\r\n        className: {\r\n          1: \"keyword\",\r\n          3: \"title.class\"\r\n        }\r\n      },\r\n      {\r\n        begin: [\r\n          /(?:trait|enum|struct|union|impl|for)/,\r\n          /\\s+/,\r\n          hljs.UNDERSCORE_IDENT_RE\r\n        ],\r\n        className: {\r\n          1: \"keyword\",\r\n          3: \"title.class\"\r\n        }\r\n      },\r\n      {\r\n        begin: hljs.IDENT_RE + '::',\r\n        keywords: {\r\n          keyword: \"Self\",\r\n          built_in: BUILTINS\r\n        }\r\n      },\r\n      {\r\n        className: \"punctuation\",\r\n        begin: '->'\r\n      },\r\n      FUNCTION_INVOKE\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = rust;\r\n"]},"metadata":{},"sourceType":"script"}